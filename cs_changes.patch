diff --git a/Assets/Script/BlindBoxMachine/BlindBox.cs b/Assets/Script/BlindBoxMachine/BlindBox.cs
index a282865..47ff1a9 100644
--- a/Assets/Script/BlindBoxMachine/BlindBox.cs
+++ b/Assets/Script/BlindBoxMachine/BlindBox.cs
@@ -5,28 +5,46 @@ using Script.Machine.ResourceManager;
 using System;
 using System.Collections.Generic;
 using UnityEngine;
+using UnityEngine.Serialization;
 
 [Serializable]
 public class BlindBox : SingleProductBase
 {
 
-    public BoxTypeName boxTypeName;
+    [FormerlySerializedAs("boxTypeName")] public BoxTypeName BoxTypeName;
 
 
     public override void OnProductCreated()
     {
         Debug.Log("created");
         var boxcontroller = GameController.Instance.BoxController;
-        if (boxcontroller.TryGetAmount(boxTypeName, out long amount))
+        if (boxcontroller.TryGetAmount(BoxTypeName, out long amount))
         {
             Debug.Log(amount);
-            Debug.Log(boxcontroller.TrySetAmount(boxTypeName, amount + 1));
+            Debug.Log(boxcontroller.TrySetAmount(BoxTypeName, amount + 1));
         }
         else
         {
-            boxcontroller.TrySetAmount(boxTypeName, 1);
+            boxcontroller.TrySetAmount(BoxTypeName, 1);
         }
     }
 
+    public override IProduct.SaveData Save() {
+        if (base.Save() is not BlindBoxSaveData data) return base.Save();
+        
+        data.BoxTypeName = BoxTypeName;
 
+        return data;
+    }
+
+    public override void Load(IProduct.SaveData saveData) {
+        BaseLoad(saveData);
+        if (saveData is not BlindBoxSaveData data) return;
+        
+        BoxTypeName = data.BoxTypeName;
+    }
+
+    public class BlindBoxSaveData : IProduct.SaveData {
+        public BoxTypeName BoxTypeName;
+    }
 }
diff --git a/Assets/Script/BlindBoxMachine/BlindBoxMachine.cs b/Assets/Script/BlindBoxMachine/BlindBoxMachine.cs
index 09820c3..2332d07 100644
--- a/Assets/Script/BlindBoxMachine/BlindBoxMachine.cs
+++ b/Assets/Script/BlindBoxMachine/BlindBoxMachine.cs
@@ -28,7 +28,7 @@ public class BlindBoxMachine : MachineBase
     {
         BlindBox nullbb = new BlindBox()
         {
-            boxTypeName = BoxTypeName.Null,
+            BoxTypeName = BoxTypeName.Null,
         };
         if (CurrentProgress >= MaxProgress)
         {
@@ -51,16 +51,45 @@ public class BlindBoxMachine : MachineBase
 
     public override ProductBase CreateProduct()
     {
-        Debug.Log("calling create");
         var ret = base.CreateProduct();
-        if (amount-- <= 0 && !(Product is BlindBox bbProduct && bbProduct.boxTypeName == BoxTypeName.Null))
+        if (amount-- <= 0 && !(Product is BlindBox bbProduct && bbProduct.BoxTypeName == BoxTypeName.Null))
         {
             Debug.LogWarning("Product order completed");
             amount = 0;
-            ProductBase createdProduct = Product ?? new BlindBox { boxTypeName = BoxTypeName.Null };
-            Product = new BlindBox { boxTypeName = BoxTypeName.Null };
+            ProductBase createdProduct = Product ?? new BlindBox { BoxTypeName = BoxTypeName.Null };
+            Product = new BlindBox { BoxTypeName = BoxTypeName.Null };
         }
 
         return ret;
     }
+
+    public override void Load(MachineBaseData data) {
+        base.Load(data);
+        if (data is not BBMData saveData) return;
+
+        amount = saveData.Amount;
+        maxAmount = saveData.MaxAmount;
+        recipes.Clear();
+        foreach (var recipe in saveData.Recipes) {
+            var r = Activator.CreateInstance<BlindBox>();
+            r.Load(recipe);
+            recipes.Add(r);
+        }
+    }
+
+    public override MachineBaseData Save() {
+        var data = base.Save() as BBMData;
+        
+        if (data is null) return base.Save();
+        data.Amount = amount;
+        data.MaxAmount = maxAmount;
+        data.Recipes = recipes.Select(r => r.Save()).Cast<BlindBox.BlindBoxSaveData>().ToList();
+        return data;
+    }
+
+    public class BBMData : MachineBase.MachineBaseData {
+        public int Amount;
+        public List<BlindBox.BlindBoxSaveData> Recipes;
+        public int MaxAmount;
+    }
 }
diff --git a/Assets/Script/BlindBoxMachine/BlindBoxQueueDisplay.cs b/Assets/Script/BlindBoxMachine/BlindBoxQueueDisplay.cs
index d6ebdb0..e3e4e0a 100644
--- a/Assets/Script/BlindBoxMachine/BlindBoxQueueDisplay.cs
+++ b/Assets/Script/BlindBoxMachine/BlindBoxQueueDisplay.cs
@@ -104,7 +104,7 @@ public class BlindBoxQueueDisplay : MonoBehaviour
         var blindbox = (BlindBox) blindboxMachine.Product;
 
 
-        Debug.Log($"Box: {blindbox.boxTypeName} " +
+        Debug.Log($"Box: {blindbox.BoxTypeName} " +
                 $"\n {blindboxMachine.amount}");
 
 
@@ -118,8 +118,8 @@ public class BlindBoxQueueDisplay : MonoBehaviour
             currentText.gameObject.SetActive(true);
             currentImage.gameObject.SetActive(true);
 
-            BoxData currentBoxData = boxTypeManager.GetBoxData(blindbox.boxTypeName);
-            currentText.text = $"Box: {blindbox.boxTypeName} " +
+            BoxData currentBoxData = boxTypeManager.GetBoxData(blindbox.BoxTypeName);
+            currentText.text = $"Box: {blindbox.BoxTypeName} " +
                 $"\n {blindboxMachine.amount}";
             currentImage.sprite = currentBoxData.sprite;
         }
diff --git a/Assets/Script/BlindBoxMachine/Null.cs b/Assets/Script/BlindBoxMachine/Null.cs
deleted file mode 100644
index 6528d75..0000000
--- a/Assets/Script/BlindBoxMachine/Null.cs
+++ /dev/null
@@ -1,12 +0,0 @@
-using Script.Machine.Products;
-using Script.Machine.ResourceManager;
-using System.Collections.Generic;
-using UnityEngine;
-
-public class Null : SingleProductBase
-{
-    public override void OnProductCreated()
-    {
-        /*throw new System.NotImplementedException();*/
-    }
-}
diff --git a/Assets/Script/BlindBoxMachine/RecipeButton.cs b/Assets/Script/BlindBoxMachine/RecipeButton.cs
index 7424f69..ec77ba4 100644
--- a/Assets/Script/BlindBoxMachine/RecipeButton.cs
+++ b/Assets/Script/BlindBoxMachine/RecipeButton.cs
@@ -110,31 +110,31 @@ public class RecipeButton : MonoBehaviour
 
         BoxTypeManager boxTypeManager = FindFirstObjectByType<BoxTypeManager>();
 
-        BoxData boxData = boxTypeManager.GetBoxData(blindbox.boxTypeName);
+        BoxData boxData = boxTypeManager.GetBoxData(blindbox.BoxTypeName);
         // Setup result and text
         if (resultImage && boxData.sprite)
         {
             if (boxData.sprite == null)
             {
-                Debug.LogError($"[RecipeButton] Missing boxSprite for recipe result: {blindbox.boxTypeName}");
+                Debug.LogError($"[RecipeButton] Missing boxSprite for recipe result: {blindbox.BoxTypeName}");
             }
             if (resultImage == null)
             {
                 Debug.LogError("[RecipeButton] resultImage reference is missing in the Inspector!");
             }
-            Debug.Log($"[RecipeButton] Setting sprite for {blindbox.boxTypeName}");
+            Debug.Log($"[RecipeButton] Setting sprite for {blindbox.BoxTypeName}");
             resultImage.sprite = boxData.sprite;
             resultImage.preserveAspect = true;
 
             if (recipeText)
             {
-                recipeText.text = $"{blindbox.boxTypeName}";
+                recipeText.text = $"{blindbox.BoxTypeName}";
             }
         }
 
         if (recipeText)
         {
-            string formulaText = $"{blindbox.boxTypeName}";
+            string formulaText = $"{blindbox.BoxTypeName}";
             recipeText.text = formulaText;
         }
     }
diff --git a/Assets/Script/BuildingSystem/CollisionLayer.cs b/Assets/Script/BuildingSystem/CollisionLayer.cs
index 7a08469..788b3ee 100644
--- a/Assets/Script/BuildingSystem/CollisionLayer.cs
+++ b/Assets/Script/BuildingSystem/CollisionLayer.cs
@@ -1,6 +1,7 @@
+using System;
 using System.Collections.Generic;
+using System.Linq;
 using BuildingSystem.Models;
-using Script.Controller;
 using UnityEngine;
 using UnityEngine.Tilemaps;
 
@@ -8,16 +9,30 @@ namespace BuildingSystem
 {
     public class CollisionLayer : TilemapLayer
     {
-        [SerializeField]
-        private TileBase _collisionTileBase;
+        [SerializeField] private TileBase _collisionTileBase;
+
+        [SerializeField] private TileBase _foundationTileBase;
 
         public void SetCollisions(Buildable buildable, bool value) {
-            var tile = value ? _collisionTileBase : null;
+            if (_collisionTileBase == null || _foundationTileBase == null) {
+                Debug.LogError("Collision layer Tile missing!");
+                return;
+            }
             var list = new List<Vector3Int>();
             buildable.IterateCollisionSpace(tileCoords => list.Add(tileCoords));
-            foreach (var vector3Int in list) {
-                var v3 = new Vector3Int(vector3Int.x, vector3Int.y);
-                _tilemap.SetTile(v3, tile);
+            list = list.Select(v => v.ToVector2Int().ToVector3Int()).ToList();
+            foreach (var v3 in list) {
+                if (IsInnerTile(v3)) _tilemap.SetTile(v3, _foundationTileBase);
+                else _tilemap.SetTile(v3, _collisionTileBase);
+            }
+
+            bool IsInnerTile(Vector3Int pos) {
+                //Get neighboring pos
+                var neighbors = list.Where(v =>
+                    Math.Abs(v.x - pos.x) <= 1 && Math.Abs(v.y - pos.y) <= 1
+                    && v != pos).ToList();
+                //If all neighbors are in the list then true
+                return neighbors.Count == 8 && neighbors.All(v => list.Contains(v));
             }
         }
 
diff --git a/Assets/Script/BuildingSystem/ConstructionLayer.cs b/Assets/Script/BuildingSystem/ConstructionLayer.cs
index be26639..ff5a668 100644
--- a/Assets/Script/BuildingSystem/ConstructionLayer.cs
+++ b/Assets/Script/BuildingSystem/ConstructionLayer.cs
@@ -66,7 +66,7 @@ namespace BuildingSystem
                 if (machine is not null)
                 {
                     machine.Position = coords.ToVector2Int();
-                    machine.PrefabName = item.name;
+                    machine.PrefabName = item.Name;
                     GameController.Instance.MachineController.AddMachine(machine);
                 }
             }
diff --git a/Assets/Script/CameraControl/CameraController.cs b/Assets/Script/CameraControl/CameraController.cs
index a78f728..02a2024 100644
--- a/Assets/Script/CameraControl/CameraController.cs
+++ b/Assets/Script/CameraControl/CameraController.cs
@@ -61,7 +61,6 @@ public class CameraController : MonoBehaviour
 
                 // Move the camera
                 Camera.main.transform.position += direction * dragSpeed;
-                Debug.Log("direction: " + direction);
             }
         }
     }
diff --git a/Assets/Script/Controller/AudioManager.cs b/Assets/Script/Controller/AudioManager.cs
new file mode 100644
index 0000000..12beb7f
--- /dev/null
+++ b/Assets/Script/Controller/AudioManager.cs
@@ -0,0 +1,59 @@
+using System;
+using UnityEngine;
+
+[System.Serializable]
+public class Sound
+{
+    public string name;
+    public AudioClip clip;
+}
+public class AudioManager : PersistentSingleton<AudioManager>
+{
+
+    public Sound[] musicSounds, sfxSounds;
+    public AudioSource musicSource, sfxSource;
+
+    private void Start()
+    {
+        PlayMusic("Freefire");
+    }
+
+    // Update is called once per frame
+    void Update()
+    {
+
+    }
+
+
+    //Example AudioManager.Instance.PlayMusic("Freefire");
+    public void PlayMusic(string name)
+    {
+        Sound s = Array.Find(musicSounds, x => x.name == name);
+        if (s == null)
+        {
+            Debug.Log("Sound Not Found");
+        }
+
+        else
+        {
+            musicSource.clip = s.clip;
+            musicSource.Play();
+        }
+    }
+    public void PlaySfx(string name)
+    {
+        Sound s = Array.Find(sfxSounds, x => x.name == name);
+        if (s == null)
+        {
+            Debug.Log("Sound Not Found");
+        }
+
+        else
+        {
+            sfxSource.clip = s.clip;
+            sfxSource.Play();
+        }
+    }
+
+  
+}
diff --git a/Assets/Script/Controller/CommissionController.cs b/Assets/Script/Controller/CommissionController.cs
index e4ab25f..a93ce64 100644
--- a/Assets/Script/Controller/CommissionController.cs
+++ b/Assets/Script/Controller/CommissionController.cs
@@ -158,7 +158,7 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                      || JsonConvert.DeserializeObject<SaveData>(saveData) is not SaveData data) return;
+                      || SaveManager.Deserialize<SaveData>(saveData) is not SaveData data) return;
             
                 _forAllProducts = data.ForAllProducts;
                 _commissionedProducts = data.CommissionedProducts;
@@ -195,12 +195,12 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is SaveData data)
+                    || SaveManager.Deserialize<SaveData>(saveData) is SaveData data)
                     saveManager.SaveData.TryAdd(this.GetType().Name,
-                        JsonConvert.SerializeObject(newSave));
+                        SaveManager.Serialize(newSave));
                 else
                     saveManager.SaveData[this.GetType().Name]
-                        = JsonConvert.SerializeObject(newSave);
+                        = SaveManager.Serialize(newSave);
             }
             catch (System.Exception ex) {
                 Debug.LogError($"Cannot save {GetType()}");
diff --git a/Assets/Script/Controller/DailyMissionController.cs b/Assets/Script/Controller/DailyMissionController.cs
index 7689549..5cc929f 100644
--- a/Assets/Script/Controller/DailyMissionController.cs
+++ b/Assets/Script/Controller/DailyMissionController.cs
@@ -48,7 +48,7 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                      || JsonConvert.DeserializeObject<SaveData>(saveData) is not SaveData data) return;
+                      || SaveManager.Deserialize<SaveData>(saveData) is not SaveData data) return;
             
                 _lastUpdate = data.LastUpdate;
                 for (var i = 0; i < data.DailyMissionsState.Count; i++) {
@@ -71,12 +71,12 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is SaveData data)
+                    || SaveManager.Deserialize<SaveData>(saveData) is SaveData data)
                     saveManager.SaveData.TryAdd(this.GetType().Name,
-                        JsonConvert.SerializeObject(newSave));
+                        SaveManager.Serialize(newSave));
                 else
                     saveManager.SaveData[this.GetType().Name]
-                        = JsonConvert.SerializeObject(newSave);
+                        = SaveManager.Serialize(newSave);
             }
             catch (System.Exception ex) {
                 Debug.LogError($"Cannot save {GetType()}");
diff --git a/Assets/Script/Controller/GameController.cs b/Assets/Script/Controller/GameController.cs
index d8db60f..b92977e 100644
--- a/Assets/Script/Controller/GameController.cs
+++ b/Assets/Script/Controller/GameController.cs
@@ -121,26 +121,36 @@ namespace Script.Controller {
             await SaveManager.LoadFromCloud();
             await SaveManager.LoadFromLocal();
 
-            #region Game Controller's own save
 
-            if (saveManager.SaveData.TryGetValue(nameof(HasSaveTimer), out string hasSaveTimerString)) {
-                HasSaveTimer = hasSaveTimerString == bool.TrueString; 
-            }
+            try { 
+                #region Game Controller's own save
 
-            if (saveManager.SaveData.TryGetValue(nameof(MinutesBetweenSave), out string minutesBetweenSaveString)) {
-                if (float.TryParse(minutesBetweenSaveString, out var minutesBetweenSave))
-                    MinutesBetweenSave = minutesBetweenSave;
-            }
+                if (saveManager.SaveData.TryGetValue(nameof(HasSaveTimer), out string hasSaveTimerString)) {
+                    HasSaveTimer = hasSaveTimerString == bool.TrueString; 
+                }
 
-            if (saveManager.SaveData.TryGetValue(nameof(GroundAddedTiles), out string groundAddedTilesString)) {
-                var list = JsonConvert.DeserializeObject<List<V2Int>>(groundAddedTilesString);
+                if (saveManager.SaveData.TryGetValue(nameof(MinutesBetweenSave), out string minutesBetweenSaveString)) {
+                    if (float.TryParse(minutesBetweenSaveString, out var minutesBetweenSave))
+                        MinutesBetweenSave = minutesBetweenSave;
+                }
 
-                list.Select(v => (Vector2Int)v).ForEach(v => Ground.SetTile(v.ToVector3Int(), GroundTile));
-            }
+                if (saveManager.SaveData.TryGetValue(nameof(GroundAddedTiles), out string groundAddedTilesString)) {
+                    var list =SaveManager.Deserialize<List<V2Int>>(groundAddedTilesString);
 
-            #endregion
-            
-            _controllers.ForEach(c => c.Load(saveManager));
+                    list.Select(v => (Vector2Int)v).ForEach(v => Ground.SetTile(v.ToVector3Int(), GroundTile));
+                }
+                #endregion
+                
+                Debug.LogWarning("Loading controllers");
+                _controllers.ForEach(c => {
+                    Debug.LogWarning($"Loading {c.GetType().Name}");
+                    c.Load(saveManager);
+                }); 
+                
+            }
+            catch (System.Exception ex) {
+                Debug.LogWarning(ex);
+            }
         }
 
         private async Task Save(SaveManager saveManager) {
@@ -152,12 +162,11 @@ namespace Script.Controller {
                 saveManager.SaveData.AddOrUpdate(nameof(HasSaveTimer), HasSaveTimer ? bool.TrueString : bool.FalseString, (s, s1) => HasSaveTimer ? bool.TrueString : bool.FalseString);
                 saveManager.SaveData.AddOrUpdate(nameof(MinutesBetweenSave), MinutesBetweenSave.ToString(CultureInfo.InvariantCulture),
                     (s, s1) => MinutesBetweenSave.ToString(CultureInfo.InvariantCulture));
-                saveManager.SaveData.AddOrUpdate(nameof(GroundAddedTiles), JsonConvert.SerializeObject(GroundAddedTiles.Select(V2Int.ToV2Int)), (s, s1) => JsonConvert.SerializeObject(GroundAddedTiles));
+                saveManager.SaveData.AddOrUpdate(nameof(GroundAddedTiles), SaveManager.Serialize(GroundAddedTiles.Select(V2Int.ToV2Int)), (s, s1) => SaveManager.Serialize(GroundAddedTiles));
                 #endregion
             }
             catch (System.Exception e) {
                 Debug.LogWarning(e);
-                throw;
             }
 
             Debug.LogWarning("Saving to file");
diff --git a/Assets/Script/Controller/MachineController.cs b/Assets/Script/Controller/MachineController.cs
index 5d3beea..fd48f6e 100644
--- a/Assets/Script/Controller/MachineController.cs
+++ b/Assets/Script/Controller/MachineController.cs
@@ -12,6 +12,7 @@ using Script.HumanResource.Worker;
 using Script.Machine;
 using Unity.VisualScripting;
 using UnityEngine;
+using UnityEngine.AI;
 using UnityEngine.Tilemaps;
 
 namespace Script.Controller {
@@ -55,14 +56,14 @@ namespace Script.Controller {
 
         public override void OnAwake() {
             base.OnAwake();
-            
+
             _constructionLayer = GameController.Instance.ConstructionLayer;
             _constructionLayer.TryGetComponent<ConstructionLayer>(out _constructionLayerScript);
         }
 
         private Tilemap _constructionLayer;
         private ConstructionLayer _constructionLayerScript;
-        
+
         public event Action<MachineBase> onMachineAdded = delegate { };
         public event Action<MachineBase> onMachineRemoved = delegate { };
         public event Action<string> onMachineUnlocked = delegate { };
@@ -106,10 +107,17 @@ namespace Script.Controller {
             return machines.Where(m => m.IsWorkable && m.Slots.Count() > m.Workers.Count());
         }
 
-        public IEnumerable<MachineBase> FindWorkableMachines(IWorker worker,
+        public IEnumerable<MachineBase> FindWorkableMachines(Worker worker,
             [CanBeNull] IEnumerable<MachineBase> machines = null) =>
             FindWorkableMachines(machines)
-                .Where(m => m.Slots.Any(s => s.CanAddWorker(worker)));
+                .Where(m => m.Slots.Any(s =>
+                    s.CanAddWorker(worker) && worker.Agent.CalculatePath(GetNavMeshHit(worker), new())));
+
+        private Vector3 GetNavMeshHit(Worker worker) {
+            NavMeshHit hit;
+            if (!NavMesh.SamplePosition(worker.transform.position, out hit, Single.MaxValue, 1)) return Vector3.zero;
+            return hit.position;
+        }
 
         [Serializable]
         public struct MachineCoreRecovery {
@@ -136,25 +144,31 @@ namespace Script.Controller {
         public override void Load(SaveManager saveManager) {
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is not SaveData data) return;
-
-                
-                _unlockMachines = new(data.UnlockMachines);
-                if (_constructionLayerScript == null || _constructionLayerScript == default) {
+                    || SaveManager.Deserialize<SaveData>(saveData) is not SaveData data)
                     return;
-                }
 
-                foreach (var m in data.Machines) {
-                    var prefab = Buildables.FirstOrDefault(b => b.Name == m.PrefabName);
-                    if (prefab == default) continue;
 
-                    var worldPos = _constructionLayer.CellToWorld(m.Position.ToVector3Int());
-                    var constructedGameObject = _constructionLayerScript.Build(worldPos, prefab);
-
-                    if (constructedGameObject is null
-                        || !constructedGameObject.TryGetComponent<MachineBase>(out var machine)) continue;
-                    machine.Load(m);
-                }
+                _unlockMachines = new(data.UnlockMachines);
+                if (_constructionLayerScript == null || _constructionLayerScript == default) { return; }
+
+                Debug.LogWarning($"Machine count: {data.Machines.Count}");
+                Debug.LogWarning($"Buildable prefab list: {string.Join(", ", Buildables.Select(b => b.Name))}");
+
+                UnityMainThreadDispatcher.Instance().Enqueue(() => {
+                    foreach (var m in data.Machines) {
+                        Debug.LogWarning($"Building prefab: {m.PrefabName}");
+                        var prefab = Buildables.FirstOrDefault(b => b.Name == m.PrefabName);
+                        if (prefab == default) continue;
+
+                        var worldPos = _constructionLayer.CellToWorld(m.Position.ToVector3Int());
+                        Debug.LogWarning($"Building machine: {prefab.Name} at {worldPos}");
+                        var constructedGameObject = _constructionLayerScript.Build(worldPos, prefab);
+
+                        if (constructedGameObject is null
+                            || !constructedGameObject.TryGetComponent<MachineBase>(out var machine)) continue;
+                        machine.Load(m);
+                    }
+                });
             }
             catch (System.Exception e) {
                 Debug.LogError($"Cannot load {GetType()}");
@@ -164,24 +178,25 @@ namespace Script.Controller {
         }
 
         public override void Save(SaveManager saveManager) {
-            var newSave = new SaveData() { 
-                Machines = new(), 
-                UnlockMachines = _unlockMachines };
+            var newSave = new SaveData() {
+                Machines = new(),
+                UnlockMachines = _unlockMachines
+            };
             Machines.ForEach(m => {
                 var machine = m.Save();
                 newSave.Machines.Add(machine);
             });
-            // Debug.LogWarning(JsonConvert.SerializeObject(newSave));
+            // Debug.LogWarning(SaveManager.Serialize(newSave));
 
 
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is SaveData data)
+                    || SaveManager.Deserialize<SaveData>(saveData) is SaveData data)
                     saveManager.SaveData.TryAdd(this.GetType().Name,
-                        JsonConvert.SerializeObject(newSave));
+                        SaveManager.Serialize(newSave));
                 else
                     saveManager.SaveData[this.GetType().Name]
-                        = JsonConvert.SerializeObject(newSave);
+                        = SaveManager.Serialize(newSave);
             }
             catch (System.Exception ex) {
                 Debug.LogError($"Cannot save {GetType()}");
diff --git a/Assets/Script/Controller/MascotController.cs b/Assets/Script/Controller/MascotController.cs
index b1e1bbe..65bd3e4 100644
--- a/Assets/Script/Controller/MascotController.cs
+++ b/Assets/Script/Controller/MascotController.cs
@@ -235,7 +235,7 @@ namespace Script.HumanResource.Administrator {
         public override void Load(SaveManager saveManager) {
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                      || JsonConvert.DeserializeObject<SaveData>(saveData) is not SaveData data) return;
+                      || SaveManager.Deserialize<SaveData>(saveData) is not SaveData data) return;
                 ClearData();
 
                 foreach (var mascotData in data.MascotsList) {
@@ -311,12 +311,12 @@ namespace Script.HumanResource.Administrator {
 
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is SaveData data)
+                    || SaveManager.Deserialize<SaveData>(saveData) is SaveData data)
                     saveManager.SaveData.TryAdd(this.GetType().Name,
-                        JsonConvert.SerializeObject(newSave));
+                        SaveManager.Serialize(newSave));
                 else
                     saveManager.SaveData[this.GetType().Name]
-                        = JsonConvert.SerializeObject(newSave);
+                        = SaveManager.Serialize(newSave);
             }
             catch (System.Exception ex) {
                 Debug.LogError($"Cannot save {GetType()}");
diff --git a/Assets/Script/Controller/QuestController.cs b/Assets/Script/Controller/QuestController.cs
index b90bc5f..ee7d325 100644
--- a/Assets/Script/Controller/QuestController.cs
+++ b/Assets/Script/Controller/QuestController.cs
@@ -78,7 +78,7 @@ namespace Script.Controller {
         public override void Load(SaveManager saveManager) {
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                      || JsonConvert.DeserializeObject<SaveData>(saveData) is not SaveData data) return;
+                      || SaveManager.Deserialize<SaveData>(saveData) is not SaveData data) return;
 
                 _quest.ForEach(q => q.State = QuestState.Locked);
                 for (var i = 0; i < data.QuestStates.Count; i++) {
@@ -106,12 +106,12 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is SaveData data)
+                    || SaveManager.Deserialize<SaveData>(saveData) is SaveData data)
                     saveManager.SaveData.TryAdd(this.GetType().Name,
-                        JsonConvert.SerializeObject(newSave));
+                        SaveManager.Serialize(newSave));
                 else
                     saveManager.SaveData[this.GetType().Name]
-                        = JsonConvert.SerializeObject(newSave);
+                        = SaveManager.Serialize(newSave);
             }
             catch (System.Exception ex) {
                 Debug.LogError($"Cannot save {GetType()}");
diff --git a/Assets/Script/Controller/ResourceController.cs b/Assets/Script/Controller/ResourceController.cs
index ec32c1b..d9819f9 100644
--- a/Assets/Script/Controller/ResourceController.cs
+++ b/Assets/Script/Controller/ResourceController.cs
@@ -114,7 +114,7 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                      || JsonConvert.DeserializeObject<SaveData>(saveData) is not SaveData data) return;
+                      || SaveManager.Deserialize<SaveData>(saveData) is not SaveData data) return;
 
                 _resourceConversion = new(data.ResourceConversion);
                 _resourceData = new(data.ResourceData);
@@ -137,12 +137,12 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is SaveData data)
+                    || SaveManager.Deserialize<SaveData>(saveData) is SaveData data)
                     saveManager.SaveData.TryAdd(this.GetType().Name,
-                        JsonConvert.SerializeObject(newSave));
+                        SaveManager.Serialize(newSave));
                 else
                     saveManager.SaveData[this.GetType().Name]
-                        = JsonConvert.SerializeObject(newSave);
+                        = SaveManager.Serialize(newSave);
             }
             catch (System.Exception ex) {
                 Debug.LogError($"Cannot save {GetType()}");
diff --git a/Assets/Script/Controller/SaveLoad/SaveManager.cs b/Assets/Script/Controller/SaveLoad/SaveManager.cs
index 4ce39b1..8fedb19 100644
--- a/Assets/Script/Controller/SaveLoad/SaveManager.cs
+++ b/Assets/Script/Controller/SaveLoad/SaveManager.cs
@@ -23,14 +23,13 @@ namespace Script.Controller.SaveLoad {
             get => new JsonSerializerSettings() { TypeNameHandling = TypeNameHandling.All };
         }
         
-        public static string Serialize(ConcurrentDictionary<string, string> data) {
+        public static string Serialize<TSource>(TSource data) {
             var x = JsonConvert.SerializeObject(data, Settings);
-            Debug.LogWarning(x);
             return x;
         }
 
-        public static ConcurrentDictionary<string, string> Deserialize(string data) {
-            return JsonConvert.DeserializeObject<ConcurrentDictionary<string, string>>(data, Settings);
+        public static TSource Deserialize<TSource>(string data) {
+            return JsonConvert.DeserializeObject<TSource>(data, Settings);
         }
 
 #warning implement encryption
@@ -58,7 +57,7 @@ namespace Script.Controller.SaveLoad {
         public async Task LoadFromLocal() {
             using StreamReader sr = new StreamReader(FilePath);
             var str = await sr.ReadToEndAsync();
-            var saveData = Deserialize(Decrypt(str));
+            var saveData = Deserialize<ConcurrentDictionary<string, string>>(Decrypt(str));
 
             foreach (var data in saveData.Keys) {
                 if (!SaveData.TryGetValue(data, out var value)) SaveData.TryAdd(data, saveData[data]);
diff --git a/Assets/Script/Controller/UnityMainThreadDispatcher.cs b/Assets/Script/Controller/UnityMainThreadDispatcher.cs
new file mode 100644
index 0000000..8626ccb
--- /dev/null
+++ b/Assets/Script/Controller/UnityMainThreadDispatcher.cs
@@ -0,0 +1,46 @@
+using System.Collections.Generic;
+using UnityEngine;
+
+public class UnityMainThreadDispatcher : MonoBehaviour {
+    private static UnityMainThreadDispatcher _instance;
+    private static readonly Queue<System.Action> _executionQueue = new Queue<System.Action>();
+
+    public static UnityMainThreadDispatcher Instance() {
+        // Ensure the instance is created only once and on the main thread.
+        if (_instance == null) {
+            if (Application.isPlaying) // Check if the application is playing to avoid errors in edit mode.
+            {
+                GameObject obj = new GameObject("UnityMainThreadDispatcher");
+                _instance = obj.AddComponent<UnityMainThreadDispatcher>();
+                DontDestroyOnLoad(obj); // Optional: Keep it alive between scene loads.
+            }
+            else {
+                Debug.LogError("UnityMainThreadDispatcher must be initialized during runtime.");
+                return null;
+            }
+        }
+
+        return _instance;
+    }
+
+    private void Awake() //Use Awake to ensure it runs before Start.
+    {
+        if (_instance == null) {
+            _instance = this;
+            DontDestroyOnLoad(this.gameObject);
+        }
+        else if (_instance != this) {
+            Destroy(this.gameObject); //Ensure only one instance exists.
+        }
+    }
+
+    private void Update() {
+        lock (_executionQueue) {
+            while (_executionQueue.Count > 0) { _executionQueue.Dequeue().Invoke(); }
+        }
+    }
+
+    public void Enqueue(System.Action action) {
+        lock (_executionQueue) { _executionQueue.Enqueue(action); }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Script/Controller/WorkerController.cs b/Assets/Script/Controller/WorkerController.cs
index 0b57b75..770df3b 100644
--- a/Assets/Script/Controller/WorkerController.cs
+++ b/Assets/Script/Controller/WorkerController.cs
@@ -131,7 +131,7 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                      || JsonConvert.DeserializeObject<SaveData>(saveData) is not SaveData data) return;
+                      || SaveManager.Deserialize<SaveData>(saveData) is not SaveData data) return;
 
                 foreach (var key in data.WorkerData.Keys) {
                     if (!data.WorkerData.TryGetValue(key, out var list) || !WorkerPrefabs.TryGetValue(key, out var prefab)) continue;
@@ -171,12 +171,12 @@ namespace Script.Controller {
             
             try {
                 if (!saveManager.SaveData.TryGetValue(this.GetType().Name, out var saveData)
-                    || JsonConvert.DeserializeObject<SaveData>(saveData) is SaveData data)
+                    || SaveManager.Deserialize<SaveData>(saveData) is SaveData data)
                     saveManager.SaveData.TryAdd(this.GetType().Name,
-                        JsonConvert.SerializeObject(newSave));
+                        SaveManager.Serialize(newSave));
                 else
                     saveManager.SaveData[this.GetType().Name]
-                        = JsonConvert.SerializeObject(newSave);
+                        = SaveManager.Serialize(newSave);
             }
             catch (System.Exception ex) {
                 Debug.LogError($"Cannot save {GetType()}");
diff --git a/Assets/Script/HumanResource/Worker/IWorker.cs b/Assets/Script/HumanResource/Worker/IWorker.cs
index 42822c3..0be3428 100644
--- a/Assets/Script/HumanResource/Worker/IWorker.cs
+++ b/Assets/Script/HumanResource/Worker/IWorker.cs
@@ -37,15 +37,15 @@ namespace Script.HumanResource.Worker {
         WorkerDirector Director { get; }
 
 
-        public static WorkerType ToWorkerType<TWorker>(TWorker worker) where TWorker : IWorker => ToWorkerType<TWorker>();
+        public static WorkerType ToWorkerType<TWorker>(TWorker worker) where TWorker : Worker => ToWorkerType<TWorker>();
 
-        public static WorkerType ToWorkerType<TWorker>() where TWorker : IWorker { 
+        public static WorkerType ToWorkerType<TWorker>() where TWorker : Worker { 
             switch (typeof(TWorker))
             {
                 case Type @base when @base == typeof(Worker):
                     return WorkerType.Worker;
                 case Type @base when @base == typeof(FactoryWorker):
-                    return WorkerType.Worker;
+                    return WorkerType.FactoryWorker;
                 default:
                     throw new ArgumentOutOfRangeException(typeof(TWorker).Name);
             }
diff --git a/Assets/Script/Inventory/StoreHouse.cs b/Assets/Script/Inventory/StoreHouse.cs
index 3ed7c68..c083bca 100644
--- a/Assets/Script/Inventory/StoreHouse.cs
+++ b/Assets/Script/Inventory/StoreHouse.cs
@@ -42,4 +42,26 @@ public class StoreHouse : MachineBase
         _boxController.TryGetWarehouseMaxAmount(out var maxAmount);
         _boxController.TrySetWarehouseMaxAmount(maxAmount - boxamount);
     }
+
+    public override MachineBaseData Save() {
+        if (base.Save() is not StoreHouseData data) return base.Save();
+
+        data.ResourceAmount = resorceamount;
+        data.BoxAmount = boxamount;
+        return data;
+    }
+
+    public override void Load(MachineBaseData data) {
+        base.Load(data);
+        if (data is not StoreHouseData saveData) return;
+        
+        resorceamount = saveData.ResourceAmount;
+        boxamount = saveData.BoxAmount;
+    }
+
+
+    public class StoreHouseData : MachineBase.MachineBaseData {
+        public long BoxAmount;
+        public long ResourceAmount;
+    }
 }
diff --git a/Assets/Script/Machine/IMachine.cs b/Assets/Script/Machine/IMachine.cs
index 60b751a..5f4efc1 100644
--- a/Assets/Script/Machine/IMachine.cs
+++ b/Assets/Script/Machine/IMachine.cs
@@ -19,10 +19,10 @@ namespace Script.Machine {
         float MaxProgress { get; }
         int SpawnWorkers { get; }
         WorkerType SpawnWorkerType { get; }
-        IEnumerable<IWorker> Workers { get; }
-        void AddWorker(IWorker worker);
-        void AddWorker(IWorker worker, MachineSlot slot);
-        void RemoveWorker(IWorker worker);
+        IEnumerable<Worker> Workers { get; }
+        void AddWorker(Worker worker);
+        void AddWorker(Worker worker, MachineSlot slot);
+        void RemoveWorker(Worker worker);
         IEnumerable<WorkDetail> WorkDetails { get; }
         ProductBase Product { get; }
         ProductBase CreateProduct();
diff --git a/Assets/Script/Machine/IProduct.cs b/Assets/Script/Machine/IProduct.cs
index 4d5bfd9..1297c61 100644
--- a/Assets/Script/Machine/IProduct.cs
+++ b/Assets/Script/Machine/IProduct.cs
@@ -1,9 +1,30 @@
+using System.Collections.Generic;
+using Script.Machine.ResourceManager;
+using Script.Resources;
 using UnityEngine;
 
 namespace Script.Machine {
     public interface IProduct {
         float MaxProgress { get; }
+        List<ResourceUse> ResourceUse { get; }
         void OnProductCreated();
         bool CanCreateProduct { get; }
+
+        SaveData Save();
+        void Load(SaveData data);
+        
+        public class SaveData {
+            public string Type;
+            public float MaxProgress;
+            public bool CanCreateProduct;
+            public List<ResourceUseData> ResourceUse;
+            public class ResourceUseData {
+                public Resource Resource;
+                public int Amount;
+                public bool IsResourceUseOnProductCreated;
+                public float TimeInterval;
+                public float CurrentTime;
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/MachineBase.cs b/Assets/Script/Machine/MachineBase.cs
index c24c3ed..30a01de 100644
--- a/Assets/Script/Machine/MachineBase.cs
+++ b/Assets/Script/Machine/MachineBase.cs
@@ -95,16 +95,25 @@ namespace Script.Machine {
             get => Product.MaxProgress;
         }
 
-        public int SpawnWorkers { get => _spawnWorkers; set => _spawnWorkers = value; }
+        public int SpawnWorkers {
+            get => _spawnWorkers;
+            set => _spawnWorkers = value;
+        }
+
         [SerializeField] private int _spawnWorkers;
-        public WorkerType SpawnWorkerType { get => _spawnWorkerType; set => _spawnWorkerType = value; }
+
+        public WorkerType SpawnWorkerType {
+            get => _spawnWorkerType;
+            set => _spawnWorkerType = value;
+        }
+
         [SerializeField] WorkerType _spawnWorkerType;
 
-        public IEnumerable<IWorker> Workers {
+        public IEnumerable<Worker> Workers {
             get => _slots.Select(s => s.CurrentWorker).Where(w => w != null);
         }
 
-        public virtual void AddWorker(IWorker worker, MachineSlot slot) {
+        public virtual void AddWorker(Worker worker, MachineSlot slot) {
             if (!IsWorkable) {
                 Debug.LogWarning($"Machine({name}) is not workable.");
                 return;
@@ -128,9 +137,9 @@ namespace Script.Machine {
             onWorkerChanged?.Invoke();
         }
 
-        public virtual void AddWorker(IWorker worker) => AddWorker(worker, Slots.First(s => s.CurrentWorker == null));
+        public virtual void AddWorker(Worker worker) => AddWorker(worker, Slots.First(s => s.CurrentWorker == null));
 
-        public virtual void RemoveWorker(IWorker worker) {
+        public virtual void RemoveWorker(Worker worker) {
             if (!Workers.Contains(worker)) {
                 string str = "";
                 if (worker is MonoBehaviour monoWorker) str = $"({monoWorker.name})";
@@ -153,6 +162,7 @@ namespace Script.Machine {
             set {
                 ResourceUse.ForEach(r => r.Stop());
                 _product = value;
+                _product.SetParent(this);
                 ResourceUse.ForEach(r => r.Start(this, _resourceManager));
                 onProductChanged?.Invoke(value);
             }
@@ -194,13 +204,9 @@ namespace Script.Machine {
             onProgress?.Invoke(progress);
         }
 
-        protected virtual void UnlockResource() {
-            _resourceManager.UnlockResource();
-        }
+        protected virtual void UnlockResource() { _resourceManager.UnlockResource(); }
 
-        protected virtual void TryPullResource() {
-            _resourceManager.TryPullResource(1, out _);
-        }
+        protected virtual void TryPullResource() { _resourceManager.TryPullResource(1, out _); }
 
         public event Action<float> onProgress = delegate { };
 
@@ -232,6 +238,7 @@ namespace Script.Machine {
             WorkDetails.ForEach(d => d.Machine = this);
             _progressPerSecTimer = new CountdownTimer(1);
             _resourceManager = new(this);
+            _product?.SetParent(this);
         }
 
         private void OnEnable() {
@@ -241,9 +248,7 @@ namespace Script.Machine {
             WorkDetails.ForEach(d => d.Start());
         }
 
-        private void OnValidate() { 
-            WorkDetails.ForEach(d => d.Machine = this);
-        }
+        private void OnValidate() { WorkDetails.ForEach(d => d.Machine = this); }
 
         private void OnDisable() {
             ResourceUse?.ForEach(r => r.Stop());
@@ -299,25 +304,26 @@ namespace Script.Machine {
             WorkDetails.ForEach(d => d.Update(Time.deltaTime));
         }
 
-        public virtual MachineBaseData Save() => new MachineBaseData(){
-            PrefabName = PrefabName,
-            Position = Position,
-            PowerUse = _powerUse,
-            ResourceManager = _resourceManager.ToSaveData(),
-            HasEnergyForWork = HasEnergyForWork,
-            HasTimer = _progressPerSecTimer is not null && _progressPerSecTimer != default,
-            TimerTime = _progressPerSecTimer?.Time ?? 0f * _progressPerSecTimer?.Progress ?? 1f,
-            TimerCurrentTime = _progressPerSecTimer?.Time ?? 0f,
-            ProgressQueue = _progressQueue,
-            IsClosed = _isClosed,
-            CurrentProgress = _currentProgress,
-            LastProgress = _lastProgress,
-            WorkDetails = _workDetails.Select(w => w.Save()).ToList(),
-            Product = _product,
-            PlacedTime = _placedTime,
-            SpawnWorkers = _spawnWorkers,
-            SpawnWorkerType = _spawnWorkerType,
-        };
+        public virtual MachineBaseData Save() =>
+            new MachineBaseData() {
+                PrefabName = PrefabName,
+                Position = Position,
+                PowerUse = _powerUse,
+                ResourceManager = _resourceManager.ToSaveData(),
+                HasEnergyForWork = HasEnergyForWork,
+                HasTimer = _progressPerSecTimer is not null && _progressPerSecTimer != default,
+                TimerTime = _progressPerSecTimer?.Time ?? 0f * _progressPerSecTimer?.Progress ?? 1f,
+                TimerCurrentTime = _progressPerSecTimer?.Time ?? 0f,
+                ProgressQueue = _progressQueue,
+                IsClosed = _isClosed,
+                CurrentProgress = _currentProgress,
+                LastProgress = _lastProgress,
+                WorkDetails = _workDetails.Select(w => w.Save()).ToList(),
+                Product = _product.Save(),
+                PlacedTime = _placedTime,
+                SpawnWorkers = _spawnWorkers,
+                SpawnWorkerType = _spawnWorkerType,
+            };
 
         public virtual void Load(MachineBaseData data) {
             _workDetails.Clear();
@@ -327,6 +333,7 @@ namespace Script.Machine {
                 workDetail.Machine = this;
                 _workDetails.Add(workDetail);
             }
+
             PrefabName = data.PrefabName;
             Position = data.Position;
             PowerUse = data.PowerUse;
@@ -341,11 +348,22 @@ namespace Script.Machine {
             IsClosed = data.IsClosed;
             CurrentProgress = data.CurrentProgress;
             _lastProgress = data.LastProgress;
-            Product = data.Product;
             _placedTime = data.PlacedTime;
             _spawnWorkers = data.SpawnWorkers;
             _spawnWorkerType = data.SpawnWorkerType;
-            
+            var pType = Type.GetType(data.Product.Type);
+            if (pType != null
+                && pType.IsSubclassOf(typeof(ProductBase))
+                && Activator.CreateInstance(pType) is ProductBase product) {
+                if (Product.GetType() == product.GetType()) {
+                    Product.Load(data.Product);
+                }
+                else {
+                    product.Load(data.Product);
+                    Product = product;
+                }
+            }
+
             UpdateWorkDetails();
             OnDisable();
             OnEnable();
@@ -365,7 +383,7 @@ namespace Script.Machine {
             public float CurrentProgress;
             public float LastProgress;
             public List<WorkDetail.SaveData> WorkDetails;
-            public ProductBase Product;
+            public IProduct.SaveData Product;
             public DateTimeOffset PlacedTime;
             public int SpawnWorkers;
             public WorkerType SpawnWorkerType;
diff --git a/Assets/Script/Machine/MachineDataGetter/MachineData.cs b/Assets/Script/Machine/MachineDataGetter/MachineData.cs
index 80886a6..31e52d3 100644
--- a/Assets/Script/Machine/MachineDataGetter/MachineData.cs
+++ b/Assets/Script/Machine/MachineDataGetter/MachineData.cs
@@ -25,7 +25,9 @@ namespace Script.Machine.MachineDataGetter {
         public static MachineData Create(InformationPanel panel, MachineBase machine) {
             return machine switch {
                 BlindBoxMachine blindBoxMachine => new BlindBoxMachineData(panel, machine),
+                RestRoom restRoom => new RestroomData(panel, machine),
                 ResourceExtractor resourceExtractor => new ResourceExtractorData(panel, machine),
+                StoreHouse storeHouse => new StoreHouseData(panel, machine),
                 Canteen canteen => new CanteenData(panel, machine),
                 CanteenKitchen canteenKitchen => new CanteenKitchenData(panel, machine),
                 Generator generator => new GeneratorData(panel, machine),
@@ -70,4 +72,14 @@ namespace Script.Machine.MachineDataGetter {
         public TestMachineData(InformationPanel panel, MachineBase machine) : base(panel, machine) { }
         protected override string GetDescriptionText() { return ""; }
     }
-}
\ No newline at end of file
+    
+    public class RestroomData : MachineData {
+        public RestroomData(InformationPanel panel, MachineBase machine) : base(panel, machine) { }
+        protected override string GetDescriptionText() { return ""; }
+    }
+    
+    public class StoreHouseData : MachineData {
+        public StoreHouseData(InformationPanel panel, MachineBase machine) : base(panel, machine) { }
+        protected override string GetDescriptionText() { return ""; }
+    }
+    }
\ No newline at end of file
diff --git a/Assets/Script/Machine/MachineSlot.cs b/Assets/Script/Machine/MachineSlot.cs
index c53ade6..70e995c 100644
--- a/Assets/Script/Machine/MachineSlot.cs
+++ b/Assets/Script/Machine/MachineSlot.cs
@@ -10,8 +10,9 @@ using UnityEngine.Serialization;
 namespace Script.Machine {
     [DisallowMultipleComponent]
     public class MachineSlot : MonoBehaviour {
-        [CanBeNull] public IWorker CurrentWorker {get; private set;}
-        [CanBeNull] public IWorker WishListWorker  {get; private set;}
+        [CanBeNull] public Worker CurrentWorker {get => _currentWorker; private set => _currentWorker = value;}
+        [SerializeField] [CanBeNull] private Worker _currentWorker;
+        [CanBeNull] public Worker WishListWorker  {get; private set;}
         private CountdownTimer _wishlistTimer;
 
         [SerializeField] private float _wishlistTravelTimer;
@@ -20,10 +21,8 @@ namespace Script.Machine {
         [SerializeField] private CollectionWrapperList<WorkerType> _forWorker;
         public MachineBase Machine { get; private set; }
 
-
         public bool SetCurrentWorker([CanBeNull] Worker worker = null) {
             Debug.LogWarning($"Try setting {((Worker)worker)?.name ?? "null"} as the current worker");
-
             if (worker is not null) {
                 if (CurrentWorker == worker) return true;
                 if (CurrentWorker is not null) {
@@ -50,14 +49,14 @@ namespace Script.Machine {
             return true;
         }
 
-        public bool CanAddWorker(IWorker worker) {
+        public bool CanAddWorker(Worker worker) {
             if (!Machine.IsWorkable) return false;
             
             if (_forAll) return true;
             return _forWorker.Value.Any(w => w == IWorker.ToWorkerType(worker));
         }
         
-        public bool SetWishlist([CanBeNull] IWorker worker = null) {
+        public bool SetWishlist([CanBeNull] Worker worker = null) {
             if (worker != null) {
                 if (WishListWorker != null) {
                     Debug.LogError($"{this.name} slot is wish listed!");
@@ -70,6 +69,8 @@ namespace Script.Machine {
                     return false;
                 }
             }
+
+            Debug.LogWarning("Add worker to wishlist");
             WishListWorker = worker;
             if (WishListWorker != null) {
                 _wishlistTimer.Start();
diff --git a/Assets/Script/Machine/Machines/Canteen/Canteen.cs b/Assets/Script/Machine/Machines/Canteen/Canteen.cs
index 117a786..7544cdc 100644
--- a/Assets/Script/Machine/Machines/Canteen/Canteen.cs
+++ b/Assets/Script/Machine/Machines/Canteen/Canteen.cs
@@ -1,16 +1,22 @@
 using System.Linq;
+using Script.Machine.MachineDataGetter;
 using UnityEngine;
 
 namespace Script.Machine.Machines.Canteen {
     [RequireComponent(typeof(CanteenFoodStorage))]
     public class Canteen : MachineBase {
         private CanteenFoodStorage _storage;
+        private CanteenKitchen _kitchen;
         protected override void Awake() {
             base.Awake();
             _storage = GetComponent<CanteenFoodStorage>();
             _storage.onMealAmountChanged += (amount) => {
                 IsClosed = _storage.AvailableMeals <= 0;
             };
+            if (_storage is null) Debug.LogError("Cannot find Food storage"); 
+            
+            _kitchen = GetComponentInChildren<CanteenKitchen>();
+            if (_kitchen is null) Debug.LogError("Cannot find Kitchen"); 
         }
 
         private int _lockedMeals = 0;
@@ -39,5 +45,34 @@ namespace Script.Machine.Machines.Canteen {
             _storage.TryChangeMealAmount(_lockedMeals);
             _lockedMeals = 0;
         }
+
+        public override void Load(MachineBaseData data) {
+            base.Load(data);
+            if (data is not CanteenData saveData) return;
+            _storage.Load(saveData.Storage);
+            _kitchen.Load(saveData.Kitchen);
+        }
+
+        public override MachineBaseData Save() {
+            if (base.Save() is not CanteenData data) return base.Save();
+            
+            data.Storage = _storage.Save();
+            data.Kitchen = (CanteenData.KitchenData) _kitchen.Save();
+            return data;
+        }
+
+        public class CanteenData : MachineBase.MachineBaseData {
+            public FoodStorageData Storage;
+            public KitchenData Kitchen;
+
+            public class FoodStorageData {
+                public int MaxCapacity;
+                public int AvailableMeals;
+            }
+
+            public class KitchenData : MachineBase.MachineBaseData {
+                
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Machines/Canteen/CanteenFoodStorage.cs b/Assets/Script/Machine/Machines/Canteen/CanteenFoodStorage.cs
index 3b1c645..cadec53 100644
--- a/Assets/Script/Machine/Machines/Canteen/CanteenFoodStorage.cs
+++ b/Assets/Script/Machine/Machines/Canteen/CanteenFoodStorage.cs
@@ -14,13 +14,21 @@ namespace Script.Machine.Machines.Canteen {
         public bool TryChangeMealAmount(int amount) {
             var newAmount = amount + AvailableMeals;
 
+            if (!IsFoodAmountValid(ref newAmount)) return false;
+
+            AvailableMeals = newAmount;
+            onMealAmountChanged?.Invoke(amount);
+            return true;
+        }
+        
+        bool IsFoodAmountValid(ref int newAmount) {
             if (newAmount > MaxCapacity) {
                 if (AvailableMeals >= MaxCapacity) {
                     Debug.LogError("Meal amount exceeds max capacity");
                     return false;
                 }
                 
-                amount = MaxCapacity - AvailableMeals;
+                var amount = MaxCapacity - AvailableMeals;
                 newAmount = amount + AvailableMeals;
             }
 
@@ -29,8 +37,6 @@ namespace Script.Machine.Machines.Canteen {
                 return false;
             }
 
-            AvailableMeals = newAmount;
-            onMealAmountChanged?.Invoke(amount);
             return true;
         }
 
@@ -45,5 +51,16 @@ namespace Script.Machine.Machines.Canteen {
             _maxCapacity = capacity;
             return true;
         }
+
+        public Canteen.CanteenData.FoodStorageData Save() =>
+            new() {
+                MaxCapacity = MaxCapacity,
+                AvailableMeals = AvailableMeals
+            };
+
+        public void Load(Canteen.CanteenData.FoodStorageData data) {
+            _maxCapacity = data.MaxCapacity;
+            AvailableMeals = data.AvailableMeals;
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Machines/Generator/Generator.cs b/Assets/Script/Machine/Machines/Generator/Generator.cs
index 4a8c355..29b4b6f 100644
--- a/Assets/Script/Machine/Machines/Generator/Generator.cs
+++ b/Assets/Script/Machine/Machines/Generator/Generator.cs
@@ -12,5 +12,22 @@ namespace Script.Machine.Machines.Generator {
         {
             base.Start();
         }
+
+        public override void Load(MachineBaseData data) {
+            base.Load(data);
+            if (data is not GeneratorData saveData) return;
+            _power = saveData.Power;
+        }
+
+        public override MachineBaseData Save() {
+            if (base.Save() is not GeneratorData saveData) return base.Save();
+            
+            saveData.Power = _power;
+            return saveData;
+        }
+
+        public class GeneratorData : MachineBaseData {
+            public int Power;
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Products/AddToStorageProduct.cs b/Assets/Script/Machine/Products/AddToStorageProduct.cs
index dec01c3..f5523c0 100644
--- a/Assets/Script/Machine/Products/AddToStorageProduct.cs
+++ b/Assets/Script/Machine/Products/AddToStorageProduct.cs
@@ -19,10 +19,16 @@ namespace Script.Machine.Products {
     [Serializable]
     public class KitchenMealProduct : AddToStorageProduct {
         public override bool CanCreateProduct { get => _storage.MaxCapacity > _storage.AvailableMeals; }
-        [SerializeField] CanteenFoodStorage _storage;
+        CanteenFoodStorage _storage => _machine.GetComponentInParent<CanteenFoodStorage>();
         public override void OnProductCreated() {
+            if (_storage is null) {
+                Debug.LogError($"Cannot find food storage: {_machine.name}");
+                return;
+            }
             _storage.TryChangeMealAmount(Amount);
         }
+
+        public override void Load(IProduct.SaveData data) => BaseLoad(data); 
     }
 
 
@@ -206,5 +212,38 @@ namespace Script.Machine.Products {
             }
             return quantityDropRates.FirstOrDefault()?.quantity ?? 1; // Fallback to first quantity or 1
         }
+
+
+        public override IProduct.SaveData Save() {
+            if (base.Save() is not AddResourceToStorageData data) return base.Save();
+
+            data.Resource = Resource;
+            data.MaterialDropRates = materialDropRates;
+            data.QuantityDropRates = quantityDropRates;
+            data.SelectedMaterial = SelectedMaterial;
+            data.SelectedQuantity = SelectedQuantity;
+            return data;
+        }
+
+        public override void Load(IProduct.SaveData saveData) {
+            BaseLoad(saveData);
+
+            if (saveData is not AddResourceToStorageData data) return;
+            
+            Resource = data.Resource;
+            materialDropRates = data.MaterialDropRates;
+            quantityDropRates = data.QuantityDropRates;
+            SelectedMaterial = data.SelectedMaterial;
+            SelectedQuantity = data.SelectedQuantity;
+            SelectedSprite = materialDropRates.First(m => m.material == SelectedMaterial.Value).materialSprite;
+        }
+
+        public class AddResourceToStorageData : IProduct.SaveData {
+            public Resource Resource;
+            public List<MaterialDropRate> MaterialDropRates;
+            public List<QuantityDropRate> QuantityDropRates;
+            public Resource? SelectedMaterial;
+            public int SelectedQuantity;
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Products/NullProduct.cs b/Assets/Script/Machine/Products/NullProduct.cs
index 474a711..d0ccada 100644
--- a/Assets/Script/Machine/Products/NullProduct.cs
+++ b/Assets/Script/Machine/Products/NullProduct.cs
@@ -8,5 +8,7 @@ namespace Script.Machine.Products {
         public override float MaxProgress => 0f;
         public override void OnProductCreated() { }
         public override List<ResourceUse> ResourceUse => new List<ResourceUse>();
+        public override IProduct.SaveData Save() => new();
+        public override void Load(IProduct.SaveData data) {  }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Products/PlaceMachineProduct.cs b/Assets/Script/Machine/Products/PlaceMachineProduct.cs
index 5767084..887104f 100644
--- a/Assets/Script/Machine/Products/PlaceMachineProduct.cs
+++ b/Assets/Script/Machine/Products/PlaceMachineProduct.cs
@@ -1,10 +1,14 @@
 using System;
 using System.Collections.Generic;
+using System.Linq;
 using AYellowpaper.SerializedCollections;
+using BuildingSystem;
+using BuildingSystem.Models;
 using MyBox;
 using Script.Controller;
 using Script.Machine.ResourceManager;
 using Script.Resources;
+using Unity.Mathematics;
 using UnityEngine;
 using UnityEngine.Serialization;
 using Object = UnityEngine.Object;
@@ -12,28 +16,58 @@ using Object = UnityEngine.Object;
 namespace Script.Machine.Products {
     [Serializable]
     public class PlaceMachineProduct : SingleProductBase {
-        [SerializeField] private MachineBase _parent;
-        public MachineBase Building { get => _building; set => _building = value; }
-        [SerializeField] MachineBase _building;
+        [SerializeField] BuildableItem _building;
         [SerializeField] private bool _hasOffset;
         [ConditionalField(nameof(_hasOffset))][SerializeField] private Vector2Int _offsetFromParent;
         [SerializeField] bool _destroyOnComplete;
         public override void OnProductCreated() {
-            if (Building is null) {
+            if (_building is null) {
                 Debug.LogError("No building to build.");
                 return;
             }
             #warning Get parent grid position
             //Get parent pos from grid
+            var pos = _machine.Position;
             
             if (_destroyOnComplete) {
                 //Remove parent from grid
+                //Currently machines are spawned directly onto the scene
             }
             
             //Spawn into parent pos + offset
+            var tilemap = GameController.Instance.ConstructionLayer;
+            if (tilemap.TryGetComponent<ConstructionLayer>(out var ctl)) {
+                var worldPos = tilemap.CellToWorld((pos + _offsetFromParent).ToVector3Int());
+                ctl.Build(worldPos, _building);
+            }
             
+            if (_destroyOnComplete) Object.Destroy(_machine.gameObject);
+        }
+
+        public override IProduct.SaveData Save() {
+            if (base.Save() is not PlaceMachineSaveData data) return base.Save();
             
-            if (_destroyOnComplete) Object.Destroy(_parent.gameObject);
+            data.BuildableIndex = GameController.Instance.MachineController.Buildables.IndexOf(_building);
+            data.OffsetFromParent = _hasOffset ? (0,0) : (_offsetFromParent.x, _offsetFromParent.y);
+            data.DestroyOnComplete = _destroyOnComplete;
+
+            return data;
+        }
+
+        public override void Load(IProduct.SaveData saveData) {
+            BaseLoad(saveData);
+            if (saveData is PlaceMachineSaveData data) {
+                _building = GameController.Instance.MachineController.Buildables.ElementAtOrDefault(data.BuildableIndex);
+                _hasOffset = data.OffsetFromParent == (0, 0);
+                if (_hasOffset) _offsetFromParent = new Vector2Int(data.OffsetFromParent.x, data.OffsetFromParent.y);
+                _destroyOnComplete = data.DestroyOnComplete;
+            }
+        }
+
+        public class PlaceMachineSaveData : IProduct.SaveData {
+            public int BuildableIndex;
+            public (int x, int y) OffsetFromParent = (0, 0);
+            public bool DestroyOnComplete;
         }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Products/ProductBase.cs b/Assets/Script/Machine/Products/ProductBase.cs
index f2e216e..d14c01d 100644
--- a/Assets/Script/Machine/Products/ProductBase.cs
+++ b/Assets/Script/Machine/Products/ProductBase.cs
@@ -1,5 +1,6 @@
 using System;
 using System.Collections.Generic;
+using System.Linq;
 using Script.Machine.ResourceManager;
 using Script.Resources;
 using UnityEngine;
@@ -10,15 +11,46 @@ namespace Script.Machine.Products {
         public abstract float MaxProgress { get; }
         public abstract List<ResourceUse> ResourceUse { get; }
         public virtual bool CanCreateProduct { get => true; }
+        protected MachineBase _machine;
+        public void SetParent(MachineBase machine) => _machine = machine;
 
         public abstract void OnProductCreated();
+
+        public virtual IProduct.SaveData Save()  =>
+            new IProduct.SaveData() {
+                Type = this.GetType().FullName,
+                MaxProgress = MaxProgress,
+                CanCreateProduct = CanCreateProduct,
+                ResourceUse = ResourceUse.Select(r => new IProduct.SaveData.ResourceUseData() {
+                    Amount = r.Amount,
+                    Resource = r.Resource,
+                    IsResourceUseOnProductCreated = r.GetType().IsSubclassOf(typeof(ResourceUseOnProductCreated)),
+                    CurrentTime = r is ResourceUseOvertime rOvertime1 ? rOvertime1.Timer.Time : 0f,
+                    TimeInterval = r is ResourceUseOvertime rOvertime2 ? rOvertime2.TimeInterval : 0f,
+                }).ToList()
+            };
+
+        public abstract void Load(IProduct.SaveData data);
     }
 
     [Serializable]
     public abstract class SingleProductBase : ProductBase {
         public override float MaxProgress { get => _maxProgress; }
-        [SerializeField] private float _maxProgress = 100f;
+        [SerializeField] protected float _maxProgress = 100f;
         public override List<ResourceUse> ResourceUse { get => _resourceUse; }
-        [SerializeReference, SubclassSelector] private List<ResourceUse> _resourceUse = new();
+        [SerializeReference, SubclassSelector] protected List<ResourceUse> _resourceUse = new();
+
+        protected void BaseLoad(IProduct.SaveData data) {
+            _maxProgress = data.MaxProgress;
+            _resourceUse = data.ResourceUse.Select(r => {
+                    var timer = new CountdownTimer(r.TimeInterval);
+                    timer.Time = r.CurrentTime;
+                    return r.IsResourceUseOnProductCreated
+                        ? (ResourceUse)new ResourceUseOnProductCreated() { Resource = r.Resource, Amount = r.Amount }
+                        : (ResourceUse)new ResourceUseOvertime()
+                            { Resource = r.Resource, Amount = r.Amount, TimeInterval = r.TimeInterval, Timer = timer};
+                })
+                .ToList();
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Products/ProductLineupProduct.cs b/Assets/Script/Machine/Products/ProductLineupProduct.cs
index 0192f0b..e9989bc 100644
--- a/Assets/Script/Machine/Products/ProductLineupProduct.cs
+++ b/Assets/Script/Machine/Products/ProductLineupProduct.cs
@@ -5,6 +5,7 @@ using MyBox;
 using Script.Machine.ResourceManager;
 using Script.Resources;
 using UnityEngine;
+using Object = UnityEngine.Object;
 
 namespace Script.Machine.Products {
     [Serializable]
@@ -23,6 +24,7 @@ namespace Script.Machine.Products {
         protected ProductBase _currentProduct;
 
         public sealed override void OnProductCreated() {
+            _currentProduct ??= SelectNextProduct();
             _currentProduct.OnProductCreated();
             _currentProduct = SelectNextProduct(_currentProduct);
         }
@@ -30,12 +32,6 @@ namespace Script.Machine.Products {
         protected abstract List<ResourceUse> GetResourceUse();
         
         protected abstract ProductBase SelectNextProduct(ProductBase product = null);
-        
-        private void OnEnable() {
-            if (_currentProduct is null) {
-                _currentProduct = SelectNextProduct();
-            }
-        }
     }
 
     [Serializable]
@@ -43,9 +39,11 @@ namespace Script.Machine.Products {
         [SerializeReference, SubclassSelector] private List<ProductBase> _products;
 
         protected override List<ResourceUse> GetResourceUse() {
-            var list = new List<ResourceUse>();
-            _products.ForEach(p => list.AddRange(p.ResourceUse));
-            return list;
+            // var list = new List<ResourceUse>();
+            // _products.ForEach(p => list.AddRange(p.ResourceUse));
+            // return list;
+            _currentProduct ??= SelectNextProduct();
+            return _currentProduct.ResourceUse;
         }
 
         protected override ProductBase SelectNextProduct(ProductBase current = null) {
@@ -55,5 +53,38 @@ namespace Script.Machine.Products {
             
             return _products.Count > _products.IndexOf(current) + 1 ? _products.ElementAt(_products.IndexOf(current) + 1) : _products.First();
         }
+
+        public override IProduct.SaveData Save() {
+            var data = base.Save() as ProductLineupListSaveData;
+
+            if (data is null) return base.Save();
+            data.Products = _products.Select(p => p.Save()).ToList();
+            data.CurrentProductIndex = _products.IndexOf(_currentProduct);
+            
+            return data;
+        }
+
+        public override void Load(IProduct.SaveData saveData) {
+            if (saveData is not ProductLineupListSaveData data) return;
+            try { 
+                _products = data.Products.Select(p => {
+                    var type = Type.GetType(p.Type);
+                    if (type is null) return (ProductBase)default;
+                    var product = Activator.CreateInstance(type) as ProductBase;
+                    if (product is null) return (ProductBase)default;
+                    product.Load(p);
+                    return product;
+                }).ToList();
+                _currentProduct = _products.ElementAtOrDefault(data.CurrentProductIndex);
+            }
+            catch (System.Exception e) {
+                Debug.LogException(e);
+            }
+        }
+
+        public class ProductLineupListSaveData : IProduct.SaveData {
+            public int CurrentProductIndex;
+            public List<IProduct.SaveData> Products;
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/Products/WorkerCoreRefillProduct.cs b/Assets/Script/Machine/Products/WorkerCoreRefillProduct.cs
index 234cef0..5e508f4 100644
--- a/Assets/Script/Machine/Products/WorkerCoreRefillProduct.cs
+++ b/Assets/Script/Machine/Products/WorkerCoreRefillProduct.cs
@@ -7,11 +7,32 @@ using UnityEngine;
 namespace Script.Machine.Products {
     [Serializable]
     public class WorkerCoreRefillProduct : SingleProductBase {
-        [SerializeField] private MachineBase _machine;
         [SerializeField] private CoreType _core;
         [SerializeField] private float _amount;
         public override void OnProductCreated() {
             _machine.Workers.ForEach(w => w.UpdateCore(_core, _amount));
         }
+
+        public override IProduct.SaveData Save() {
+            if (base.Save() is not WorkerCoreRefillData data) return base.Save();
+            
+            data.Core = _core;
+            data.Amount = _amount;
+            return data;
+        }
+
+        public override void Load(IProduct.SaveData saveData) {
+            BaseLoad(saveData);
+
+            if (saveData is not WorkerCoreRefillData data) return;
+            
+            _core = data.Core;
+            _amount = data.Amount;
+        }
+
+        public class WorkerCoreRefillData : IProduct.SaveData {
+            public CoreType Core;
+            public float Amount;
+        }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Machine/ResourceManager/ResourceUse.cs b/Assets/Script/Machine/ResourceManager/ResourceUse.cs
index cf28b02..1d9f4d7 100644
--- a/Assets/Script/Machine/ResourceManager/ResourceUse.cs
+++ b/Assets/Script/Machine/ResourceManager/ResourceUse.cs
@@ -8,9 +8,9 @@ using UnityEngine.Serialization;
 namespace Script.Machine.ResourceManager {
     [Serializable]
     public abstract class ResourceUse {
-        public Resource Resource { get => _resource; }
+        public Resource Resource { get => _resource; set => _resource = value; }
         [SerializeField]private Resource _resource;
-        public int Amount { get => _amount; }
+        public int Amount { get => _amount; set => _amount = value; }
         [SerializeField]private int _amount;
         [FormerlySerializedAs("_machine")] public MachineBase Machine;
         protected ResourceManager _resourceManager;
@@ -56,26 +56,26 @@ namespace Script.Machine.ResourceManager {
 
     [Serializable]
     public class ResourceUseOvertime : ResourceUse {
-        public float TimeInterval { get => _timeInterval; }
+        public float TimeInterval { get => _timeInterval; set => _timeInterval = value; }
         [SerializeField]private float _timeInterval;
 
-        private Timer _timer;
+        public Timer Timer;
         
         protected override void OnStart() {
-            if (_timer is null) {
-                _timer = new CountdownTimer(TimeInterval);
-                _timer.OnTimerStop += OnTimerStop;
+            if (Timer is null) {
+                Timer = new CountdownTimer(TimeInterval);
+                Timer.OnTimerStop += OnTimerStop;
             }
-            _timer.Start();
+            Timer.Start();
         }
 
         private void OnTimerStop() {
             UseResource(); 
-            _timer.Start();
+            Timer.Start();
         }
 
         protected override void OnStop() {
-            _timer.Pause();
+            Timer.Pause();
         }
     }
 }
\ No newline at end of file
diff --git a/Assets/Script/Patterns/AI/GOAP/Strategies/MoveStrategy.cs b/Assets/Script/Patterns/AI/GOAP/Strategies/MoveStrategy.cs
index b88198c..53d27ee 100644
--- a/Assets/Script/Patterns/AI/GOAP/Strategies/MoveStrategy.cs
+++ b/Assets/Script/Patterns/AI/GOAP/Strategies/MoveStrategy.cs
@@ -4,36 +4,44 @@ using UnityEngine;
 using UnityEngine.AI;
 
 public class MoveStrategy : IActionStrategy {
-    readonly NavMeshAgent agent;
-    readonly Func<Vector3> destination;
+    readonly NavMeshAgent _agent;
+    readonly Func<Vector3> _destination;
 
     public bool CanPerform => !Complete;
-    public bool Complete => agent.remainingDistance <= 2f && !agent.pathPending;
+    public bool Complete => _agent.remainingDistance <= 2f && !_agent.pathPending;
 
     public MoveStrategy(NavMeshAgent agent, Func<Vector3> destination) {
-        this.agent = agent;
-        this.destination = destination;
+        this._agent = agent;
+        this._destination = destination;
     }
 
-    public void Start() => agent.SetDestination(destination());
-    public void Stop() => agent.ResetPath();
+    public void Start() => _agent.SetDestination(_destination());
+    public void Stop() => _agent.ResetPath();
 }
 
 public class MoveToSlotStrategy : IActionStrategy {
-    readonly NavMeshAgent agent;
-    readonly Worker worker;
+    readonly NavMeshAgent _agent;
+    readonly Worker _worker;
 
     public bool CanPerform => !Complete;
-    public bool Complete => agent.remainingDistance <= 0.01f && !agent.pathPending;
+    public bool Complete => _agent.remainingDistance <= 0.01f && !_agent.pathPending;
 
     public MoveToSlotStrategy(Worker worker) {
-        this.agent = worker.Agent;
-        this.worker = worker;
+        this._agent = worker.Agent;
+        this._worker = worker;
     }
 
     public void Start() {
-        if (worker.Director.TargetSlot is null) agent.SetDestination(worker.transform.position); 
-        else agent.SetDestination(worker.Director.TargetSlot.transform.position);
+        if (_worker.Director.TargetSlot is null) _agent.SetDestination(_worker.transform.position);
+        else {
+            if (NavMesh.SamplePosition(_worker.Director.TargetSlot.transform.position, out var hit, Single.MaxValue,
+                    1)) {
+                var newPath = new NavMeshPath();
+                if (_agent.CalculatePath(hit.position, newPath)) _agent.SetPath(newPath);
+                else _agent.SetDestination(_worker.transform.position);
+            }
+        }
+        Debug.LogWarning($"Slot position is: {_worker.Director.TargetSlot?.transform.position ?? Vector3.zero}.Pathing from: {_agent.transform.position} to {_agent.destination}");
     }
-    public void Stop() => agent.ResetPath();
+    public void Stop() => _agent.ResetPath();
 }
\ No newline at end of file
diff --git a/Assets/Script/Patterns/AI/GOAP/Strategies/WishlistMachineStrategy.cs b/Assets/Script/Patterns/AI/GOAP/Strategies/WishlistMachineStrategy.cs
index d2f1c86..9e03f9d 100644
--- a/Assets/Script/Patterns/AI/GOAP/Strategies/WishlistMachineStrategy.cs
+++ b/Assets/Script/Patterns/AI/GOAP/Strategies/WishlistMachineStrategy.cs
@@ -31,7 +31,7 @@ namespace Script.Patterns.AI.GOAP.Strategies {
 
         public void Start() {
             if (TryWishlistMachine() || _retryAttempts <= 0) {
-                Debug.Log($"Wishlisted: {_worker.WorkingSlot?.name ?? "Empty"}");
+                Debug.Log($"Wishlisted: {_worker.Director?.TargetSlot?.name ?? "Empty"}");
                 return;
             }
             _timer.OnTimerStop += Retry;
@@ -58,7 +58,11 @@ namespace Script.Patterns.AI.GOAP.Strategies {
                     NavMeshHit hit;
 
                     if (!NavMesh.SamplePosition(machine.transform.position, out hit, Single.MaxValue, 1)) continue;
-                    if (!_agent.CalculatePath(hit.position, path)) continue;
+                    if (!_agent.CalculatePath(hit.position, path)) {
+                        Debug.LogWarning($"Cannot calculate path to machine. From {_agent.transform.position} to {hit.position}");
+                        continue;
+                    }
+                        Debug.LogWarning($"Found path to machine. From {_agent.transform.position} to {hit.position}" );
                     
                     slots.Add(slot, (CalculateWeight(slot, _agent, path), path, machine));
                 }
diff --git a/Assets/Script/Patterns/AI/GOAP/Strategies/WorkStrategy.cs b/Assets/Script/Patterns/AI/GOAP/Strategies/WorkStrategy.cs
index 8e275f3..b8a29f2 100644
--- a/Assets/Script/Patterns/AI/GOAP/Strategies/WorkStrategy.cs
+++ b/Assets/Script/Patterns/AI/GOAP/Strategies/WorkStrategy.cs
@@ -12,9 +12,9 @@ public class WorkStrategy : IActionStrategy {
     public bool Complete { get; private set; }
 
     private MachineSlot _slot ;
-    readonly IWorker _worker;
+    readonly Worker _worker;
     
-    public WorkStrategy(IWorker worker) {
+    public WorkStrategy(Worker worker) {
         _worker = worker;
         Complete = false;
     }
diff --git a/Assets/Script/Resources/ResourceExtractor.cs b/Assets/Script/Resources/ResourceExtractor.cs
index 7302d6a..3b6955a 100644
--- a/Assets/Script/Resources/ResourceExtractor.cs
+++ b/Assets/Script/Resources/ResourceExtractor.cs
@@ -17,8 +17,8 @@ namespace Script.Machine
         {
             base.Start();
 
-            ProgressionPerSec = 20f;
-            if (level > 1) ProgressionPerSec *= 1.5f;
+            //ProgressionPerSec = 20f;
+            //if (level > 1) ProgressionPerSec *= 1.5f;
             //SetMachineHasEnergyForWork(true);
             if (Product == null)
             {
@@ -39,12 +39,16 @@ namespace Script.Machine
         {
             base.Update();
 
-            // Increase progress each frame if workable
+            //// Increase progress each frame if workable
+            // tam thoi fix cung
             if (IsWorkable)
             {
+                ProgressionPerSec = 20f;
+                if (level > 1) ProgressionPerSec *= 1.5f;
                 IncreaseProgress(ProgressionPerSec * Time.deltaTime);
             }
-           
+            //Debug.Log("is workable: " + IsWorkable + !IsClosed + HasResourceForWork + HasEnergyForWork + CanCreateProduct);
+            //Debug.Log("Progress per sec now" + ProgressionPerSec);  
         }
 
         public override ProductBase CreateProduct()
@@ -93,12 +97,12 @@ namespace Script.Machine
         }
 
         // Override to disable worker functionality
-        public override void AddWorker(IWorker worker, MachineSlot slot)
+        public override void AddWorker(Worker worker, MachineSlot slot)
         {
             Debug.LogWarning("ResourceExtractor does not support workers.");
         }
 
-        public override void RemoveWorker(IWorker worker)
+        public override void RemoveWorker(Worker worker)
         {
             Debug.LogWarning("ResourceExtractor does not support workers.");
         }
